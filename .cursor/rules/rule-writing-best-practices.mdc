---
description: 指导 Agent 生成高效、现代、可维护的 Cursor 规则，涵盖文件结构、frontmatter、激活机制、内容表达和可维护性等最佳实践。适用于所有要求 AI 生成新规则的场景。
globs:
  - ".cursor/rules/*.mdc"
alwaysApply: false
---


# Cursor 规则生成最佳实践

当你（Agent）被要求为本项目生成新的规则（rule）时，**必须**遵循以下原则和结构，确保规则高效、现代、可维护，并便于团队协作和后续优化。

## 1. 文件结构与格式
- **位置**：所有规则应存放于 `.cursor/rules/` 目录下，采用模块化 `.mdc` 文件，每个文件聚焦单一主题或约束。
- **文件格式**：
  - 顶部为 YAML frontmatter，包含：
    - `description`（功能描述，简明扼要）
    - `globs`（如需自动附加，指定文件匹配模式）
    - `alwaysApply`（如为基础原则，设为 true）
  - 下方为 Markdown 正文，包含具体指令、示例、反例、引用等。
- **嵌套规则**：如需对子目录/子模块定制规则，可在对应目录下新建 `.cursor/rules/` 并放置专属规则。

## 2. 规则激活机制
- 明确选择以下激活方式之一：
  - `alwaysApply: true`：始终生效，适合基础原则。
  - `globs`：自动附加，适合特定文件类型/路径。
  - 仅 `description`：Agent 根据用户意图按需加载。
  - 手动：仅被 @规则名 显式引用时生效。

## 3. 用户规则 vs 项目规则
- **项目规则**：本目录下所有规则均为项目规则，受版本控制，面向团队协作。
- **用户规则**：不在本目录定义，仅在 Cursor 设置界面维护，勿混淆。

## 4. 编写高影响力规则的原则
- **明确与直接**：使用祈使句，避免模糊表达。
- **定义范围与约束**：清楚说明允许与禁止事项。
- **高层上下文**：如有必要，简要介绍项目背景或目标。
- **像培训初级开发者一样写作**：假设 AI 不熟悉项目细节。
- **模块化与分组**：复杂规则拆分为多个小文件，按功能归类。
- **保持简洁**：单文件建议不超过 500 行。
- **示例与反例**：用代码片段展示正确/错误做法。
- **权威引用**：如有必要，附官方文档链接。
- **验证清单**：结尾附自查 checklist，便于 AI 检查输出。
- **持续优化**：规则应随 AI 错误和团队反馈不断迭代。

## 5. 生成规则时的自查清单
- [ ] 是否采用了 `.mdc` 文件和模块化结构？
- [ ] 是否包含了清晰的 frontmatter？
- [ ] 是否明确了激活方式？
- [ ] 是否用祈使句和明确约束表达？
- [ ] 是否包含示例/反例？
- [ ] 是否引用了权威文档（如适用）？
- [ ] 是否附带了验证 checklist？
- [ ] 是否将复杂内容拆分为多个小文件？
- [ ] 是否避免了冗长和重复？
- [ ] 是否便于团队后续维护和优化？

> 遵循本规则生成的所有新规则，将更易于维护、复用和团队协作，并能持续提升 AI 辅助开发的质量和效率。

