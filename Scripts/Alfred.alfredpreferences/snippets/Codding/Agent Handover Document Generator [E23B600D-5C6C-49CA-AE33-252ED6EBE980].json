{
  "alfredsnippet" : {
    "snippet" : "# TASK\nAnalyze input `log_data` from Agent 1. Generate a single, valid JSON object representing the project's state for Agent 2.\n\n# INPUT\n## log_data\n\/\/ User will paste Agent 1's raw execution log, file snapshots, or other context here.\n\/\/ The format can be unstructured text, shell history, or structured logs.\n\/\/ The model must parse this data to fill the output schema.\n[====== 在这里粘贴 Agent 1 的完整执行过程日志 ======]\n\n# LOGIC & RULES\n1.  **File Status Classification (`file_inventory.status`)**:\n    * `ACTIVE`: File is imported\/called, exists in the final file tree, and was modified in a meaningful, non-reverted way.\n    * `INVALID`: File was explicitly deleted, is a temporary build artifact (`.pyc`, `.log`), or was replaced by a newer version.\n    * `DEPRECATED`: Log indicates the file's logic is outdated or scheduled for refactoring.\n    * `UNCERTAIN`: File exists but its role or usage is not evident from `log_data`.\n2.  **Priority Classification (`next_actions.priority`)**:\n    * `0`: Critical blocker for the next immediate task.\n    * `1`: High priority, core task requirement.\n    * `2`: Medium priority, standard task.\n    * `3`: Low priority, cleanup or optional task.\n3.  **Security**: Sanitize all outputs. Replace any detected secrets (API keys, passwords) with the string `<SECRET_PLACEHOLDER>`.\n4.  **Inference**: All field values must be directly extracted or logically inferred from the provided `log_data`. If information is unavailable for a non-optional field, use `null` or an empty array `[]`.\n\n# OUTPUT_SCHEMA (Strict JSON)\n\/\/ Generate a single JSON object matching this schema. No markdown, no commentary.\n{\n  \"metadata\": {\n    \"schema_version\": \"1.0\",\n    \"source_agent\": \"Agent 1\",\n    \"target_agent\": \"Agent 2\",\n    \"timestamp_utc\": \"string \/\/ ISO 8601 format\",\n    \"project_name\": \"string \/\/ Inferred project name\",\n    \"vcs\": {\n      \"branch\": \"string | null \/\/ Git branch\",\n      \"commit_hash\": \"string | null \/\/ Git commit SHA\"\n    }\n  },\n  \"summary\": {\n    \"objective\": \"string \/\/ The final goal of the project.\",\n    \"completed_milestones\": [\n      \"string\" \/\/ List of key achievements by Agent 1.\n    ]\n  },\n  \"file_inventory\": [\n    {\n      \"path\": \"string \/\/ Full path from project root.\",\n      \"status\": \"string \/\/ ENUM: ACTIVE, INVALID, DEPRECATED, UNCERTAIN.\",\n      \"description\": \"string \/\/ Concise, one-sentence functional purpose.\",\n      \"evidence\": \"string \/\/ Brief quote or reference from log_data supporting the status.\"\n    }\n  ],\n  \"reproduction\": {\n    \"environment\": [\n      {\n        \"type\": \"string \/\/ e.g., 'language', 'tool'\",\n        \"name\": \"string \/\/ e.g., 'python', 'node'\",\n        \"version\": \"string \/\/ e.g., '>=3.9', '18.x'\"\n      }\n    ],\n    \"dependencies\": {\n      \"manager\": \"string \/\/ e.g., 'pip', 'npm'\",\n      \"file\": \"string \/\/ e.g., 'requirements.txt', 'package.json'\"\n    },\n    \"execution_steps\": [\n      \"string \/\/ Ordered list of shell commands to build, test, and run the project.\"\n    ],\n    \"validation\": {\n      \"method\": \"string \/\/ e.g., 'http_get', 'run_tests', 'check_output'\",\n      \"target\": \"string \/\/ e.g., 'http:\/\/127.0.0.1:5000\/health', 'pytest', 'stdout'\",\n      \"expected_result\": \"string \/\/ e.g., 'status_code_200', 'all tests passed', 'contains: \\\"Ready\\\"'\"\n    }\n  },\n  \"open_issues\": [\n    {\n      \"description\": \"string \/\/ Known bug, tech debt, or performance issue.\",\n      \"severity\": \"string \/\/ ENUM: CRITICAL, HIGH, MEDIUM, LOW.\"\n    }\n  ],\n  \"next_actions\": [\n    {\n      \"action_id\": \"number \/\/ Sequential ID, e.g., 1\",\n      \"priority\": \"number \/\/ 0-3, see LOGIC & RULES.\",\n      \"task\": \"string \/\/ Specific, actionable instruction for Agent 2.\",\n      \"related_files\": [\n        \"string\" \/\/ List of file paths Agent 2 will likely need to modify.\n      ]\n    }\n  ]\n}",
    "uid" : "E23B600D-5C6C-49CA-AE33-252ED6EBE980",
    "name" : "Agent Handover Document Generator",
    "keyword" : "aghand"
  }
}